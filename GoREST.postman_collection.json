{
	"info": {
		"_postman_id": "96ac6319-f352-452a-94c5-abd0476707d2",
		"name": "GoREST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33345286"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    // Verify the structure and data types of the fields\r",
							"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(responseJson).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"gender\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"// Save the user ID to an environment variable\r",
							"pm.test(\"Save user ID to environment variable\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.environment.set(\"userId\", responseJson.id); // Save the `id` as `userId`\r",
							"    console.log(\"User ID saved to environment variable: \" + responseJson.id);\r",
							"});\r",
							"\r",
							"// Save the user name to an environment variable\r",
							"pm.test(\"Save user name to environment variable\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.environment.set(\"userName\", responseJson.name); // Save the `user name` as `userName`\r",
							"    console.log(\"User name saved to environment variable: \" + responseJson.name);\r",
							"});\r",
							"\r",
							"// Save the user email to an environment variable\r",
							"pm.test(\"Save user email to environment variable\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.environment.set(\"userEmail\", responseJson.name); // Save the `user email` as `userEmail`\r",
							"    console.log(\"User email saved to environment variable: \" + responseJson.email);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random values\r",
							"const randomName = `Test User ${Math.floor(Math.random() * 100) + 1}`; // Random user name\r",
							"const randomGender = Math.random() > 0.5 ? \"male\" : \"female\"; // Random gender\r",
							"const randomEmail = `testuser${Math.floor(Math.random() * 1000)}@apiautomation.com`; // Random email\r",
							"const randomStatus = Math.random() > 0.5 ? \"active\" : \"inactive\"; // Random status\r",
							"\r",
							"// Set the variables\r",
							"pm.environment.set(\"randomName\", randomName);\r",
							"pm.environment.set(\"randomGender\", randomGender);\r",
							"pm.environment.set(\"randomEmail\", randomEmail);\r",
							"pm.environment.set(\"randomStatus\", randomStatus);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{randomName}}\",\r\n    \"gender\": \"{{randomGender}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"status\": \"{{randomStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Save the post ID to an environment variable\r",
							"pm.test(\"Save post ID to environment variable\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.environment.set(\"postId\", responseJson.id); // Save the `id` as `postId`\r",
							"    console.log(\"Post ID saved to environment variable: \" + responseJson.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Post title test\",\r\n    \"body\":\"Post body test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve User Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    // Verify the structure and data types of the fields\r",
							"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(responseJson).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"gender\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    // Verify the structure and data types of the fields\r",
							"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(responseJson).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"gender\").that.is.a(\"string\");\r",
							"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random values\r",
							"const randomName = `Test User ${Math.floor(Math.random() * 100) + 1}`; // Random user name\r",
							"const randomGender = Math.random() > 0.5 ? \"male\" : \"female\"; // Random gender\r",
							"const randomEmail = `testuser${Math.floor(Math.random() * 1000)}@apiautomation.com`; // Random email\r",
							"const randomStatus = Math.random() > 0.5 ? \"active\" : \"inactive\"; // Random status\r",
							"\r",
							"// Set the variables\r",
							"pm.environment.set(\"randomName\", randomName);\r",
							"pm.environment.set(\"randomGender\", randomGender);\r",
							"pm.environment.set(\"randomEmail\", randomEmail);\r",
							"pm.environment.set(\"randomStatus\", randomStatus);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{randomName}}\",\r\n    \"gender\": \"{{randomGender}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"status\": \"{{randomStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Details 404 error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has message property\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Message is 'Resource not found'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Resource not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/1234567",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"1234567"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User 422 error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Array contains at least one object\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.at.least(2);\r",
							"    pm.expect(jsonData[0]).to.be.an(\"object\");\r",
							"    pm.expect(jsonData[1]).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"First object has 'field' and 'message' properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property(\"field\");\r",
							"    pm.expect(jsonData[0]).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Second object has 'field' and 'message' properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1]).to.have.property(\"field\");\r",
							"    pm.expect(jsonData[1]).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"First object field is 'email' and message is 'can't be blank'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].field).to.eql(\"email\");\r",
							"    pm.expect(jsonData[0].message).to.eql(\"can't be blank\");\r",
							"});\r",
							"\r",
							"pm.test(\"Second object field is 'name' and message is 'can't be blank'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].field).to.eql(\"name\");\r",
							"    pm.expect(jsonData[1].message).to.eql(\"can't be blank\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random values\r",
							"const randomName = `Test User ${Math.floor(Math.random() * 100) + 1}`; // Random user name\r",
							"const randomGender = Math.random() > 0.5 ? \"male\" : \"female\"; // Random gender\r",
							"const randomEmail = `testuser${Math.floor(Math.random() * 1000)}@apiautomation.com`; // Random email\r",
							"const randomStatus = Math.random() > 0.5 ? \"active\" : \"inactive\"; // Random status\r",
							"\r",
							"// Set the variables\r",
							"pm.environment.set(\"randomName\", randomName);\r",
							"pm.environment.set(\"randomGender\", randomGender);\r",
							"pm.environment.set(\"randomEmail\", randomEmail);\r",
							"pm.environment.set(\"randomStatus\", randomStatus);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{randomName}}\",\r\n    \"gender\": \"{{randomGender}}\",\r\n    \"emailaddress\": \"{{randomEmail}}\",\r\n    \"status\": \"{{randomStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User 401 error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains expected fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    // Verify the structure and data types of the fields\r",
							"    pm.expect(responseJson).to.have.property(\"message\");\r",
							"    pm.expect(responseJson.message).to.eql(\"Authentication failed\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random values\r",
							"const randomName = `Test User ${Math.floor(Math.random() * 100) + 1}`; // Random user name\r",
							"const randomGender = Math.random() > 0.5 ? \"male\" : \"female\"; // Random gender\r",
							"const randomEmail = `testuser${Math.floor(Math.random() * 1000)}@apiautomation.com`; // Random email\r",
							"const randomStatus = Math.random() > 0.5 ? \"active\" : \"inactive\"; // Random status\r",
							"\r",
							"// Set the variables\r",
							"pm.environment.set(\"randomName\", randomName);\r",
							"pm.environment.set(\"randomGender\", randomGender);\r",
							"pm.environment.set(\"randomEmail\", randomEmail);\r",
							"pm.environment.set(\"randomStatus\", randomStatus);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{randomName}}\",\r\n    \"gender\": \"{{randomGender}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"status\": \"{{randomStatus}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}